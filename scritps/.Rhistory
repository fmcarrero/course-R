x[x<quantiles[1]] <- mean(x, na.rm = removeNA)
impute_outliers <-function (x , removeNA = TRUE){
quantiles <- quantile(x,c(0.05, 0.95), na.rm = removeNA)
x[x<quantiles[1]] <- mean(x, na.rm = removeNA)
x[x>quantiles[2]] <- median(x, na.rm= removeNA)
}
imputed_data <- impute_outliers(ozone.data$pressure_height)
par(mfrow= c(1,2))
boxplot(ozone.data$pressure_height,
main="Pression con outliers")
boxplot(imputed_data,
mean ="presion sin outliers")
x
impute_outliers <-function (x , removeNA = TRUE){
quantiles <- quantile(x,c(0.05, 0.95), na.rm = removeNA)
x[x<quantiles[1]] <- mean(x, na.rm = removeNA)
x[x>quantiles[2]] <- median(x, na.rm= removeNA)
x
}
imputed_data <- impute_outliers(ozone.data$pressure_height)
par(mfrow= c(1,2))
boxplot(ozone.data$pressure_height,
main="Pression con outliers")
boxplot(imputed_data,
mean ="presion sin outliers")
boxplot(imputed_data,
main ="presion sin outliers")
par(mfrow= c(1,2))
boxplot(ozone.data$pressure_height,
main="Pression con outliers")
boxplot(imputed_data,
main ="presion sin outliers")
replace_outliers <- function (x , removeNA = TRUE){
qrts <- quantile(x,probs = c(0.25, 0.75), na.rm = removeNA)
caps <- quantile (x, probs = c(.05, .095) , na.rm = removeNA )
iqr <- qrts[2] - qrts[1]
h <- 1.* iqr
x[x<qrts[1] - h ] <- caps[1]
x[x>qrts[2] + h ] <- caps[2]
x
}
par(mrfow =c(1,2))
par(mrfow = c(1,2))
par(mfrow = c(1,2))
boxplot(ozone.data$pressure_height , main ="Presión con outliers")
capped_pressure_height <-  replace_outliers(ozone.data$pressure_height)
boxplot(capped_pressure_height, main = "Presión sin outliers")
data <-  read.csv("../data/tema2/auto-mpg.csv",
header = TRUE,
stringsAsFactors = FALSE)
View(data)
summary(data)
data$cylinders <- factor(data$cylinders, levels = c(3,4,5,6,8),
labels = c("3cilindros","4cilindros","5cilindros","6cilindros","8 cilindros"))
View(data)
data$cylinders <- factor(data$cylinders, levels = c(3,4,5,6,8),
labels = c("3cil","4cil","5cil","6cil","8 cil"))
View(data)
data <-  read.csv("../data/tema2/auto-mpg.csv",
header = TRUE,
stringsAsFactors = FALSE)
data$cylinders <- factor(data$cylinders, levels = c(3,4,5,6,8),
labels = c("3cil","4cil","5cil","6cil","8 cil"))
View(data)
summary(data)
str(data)
summary(data$cylinders)
str(data$cylinders)
install.packages(c("modeest", "raster", "moments"))
library (modeest)
library(modeest)
library(raster)
library(moments)
library(moments)
library(moments)
library(raster)
X <- data$mpg
### medidas de centralización
mean(X)
median(X)
mode(X)
mfv(X)
quantile(X)
var(X)
sd(X) # DESVIACION STANDAR
cv(X)
skewness(X)
kurtosis(X)
hist(X)
par(mfrow = c(1,1))
hist(X)
data <-  read.csv("../data/tema2/auto-mpg.csv",
stringsAsFactors = FALSE)
data[1]
data[1:5 , 8:9]
data[1:5 , c(8,9)]
data [1:5 , c("model_year","car_name")]
data[data$mpg == max(data$mpg) |  data$mpg == min(data$mpg),]
data [data$mpg > 30 && data$cylinders==6]
data [data$mpg > 30 && data$cylinders==6,]
data [data$mpg > 30 && data$cylinders==6,c("car_name", "mpg")]
data [data$mpg > 30 & data$cylinders==6,c("car_name", "mpg")]
data[data$mpg>30 & data$cyl == 6 , c("car_name","mpg")]
subset(data,mpg>30 & cylinders == 6)
subset(data,mpg>30 & cylinders == 6,
select = c("car_name","mpg"))
data[1:5 , !names(data) %in% c("no","car_name")]
data[1:5 , !names(data) %in% c("No","car_name")]
data[1:5 , names(data) %in% c("No","car_name")]
data[1:5 , !names(data) %in% c("No","car_name")]
data [data$mpg %in% c(15,20) , c("car_name","mpg")]
data <- read.csv("../data/tema2/auto-mpg.csv" ,
stringsAsFactors = F)
View(data)
unique (data$cylinders)
carslist <- split(data, data$cylinders)
View(carslist)
carslist[1]
hist(carslist[1])
carslist[[1]]
str(carslist[[1]])
str(carslist[1])
str(carslist[[1]])
names(carslist[[1]])
library (car)
install.packages("car")
library (caret)
install.packages("caret")
library (caret)
data <- read.csv("../data/tema2/BostonHousing.csv")
View(data)
trining.ids <-  createDataPartition(data$MEDV,
P=0.8,
list = F)
trining.ids <-  createDataPartition(data$MEDV,
p=0.8,
list = F)
View(trining.ids)
training.ids <-  createDataPartition(data$MEDV,
p=0.8,
list = F)
house.training <-  data[training.ids,]
View(house.training)
house.validations <- data[ -training.ids ,]
training.ids.2 <- createDataPartition(data$MEDV,
p=0.7,
list=F)
house.training.2 <- data[training.ids.2 , ]
temp <- data[-training.ids.2]
temp <- data[-training.ids.2,]
validations.2 < - createDataPartition(temp$MEDV,
p=0.5,
list=F)
validations.ids.2 < - createDataPartition(temp$MEDV,
p=0.5,
list=F)
validations.ids.2 <- createDataPartition(temp$MEDV,
p=0.5,
list=F)
house.validations <- temp[validations.ids.2 ,]
house.testing <- temp[-validations.ids.2,]
data2 <-  read.csv("../data/tema2/boston-housing-classification.csv",
stringsAsFactors = F)
View(data2)
View(data2)
data2 <-  read.csv("../data/tema2/boston-housing-classification.csv",
stringsAsFactors = T)
View(data2)
training.ids.3 <- createDataPartition(data2$MEDV_CAT,
p=0.7,
list=F)
data.training.3 <-  data2[training.ids.3,]
data.validation.3 <-  data2[-training.ids.3,]
rda.cb.partition2 <- function(dataframe , target.index , prob){
library(caret)
training.ids <- createDataPartition(dataframe[, target.index],
p= prob,
list= F)
list(train = dataframe[training.ids,] , val = dataframe[-training.ids,2])
}
rda.cb.partition3 <- function(dataframe, target.index ,
prob.train , prob.val){
library(caret)
training.ids <- createDataPartition(dataframe[,target.index],
p= prob.train,
list= F)
train.data <-  dataframe[training.ids,]
temp <-  dataframe[-training.ids,]
validation.ids <-  createDataPartition(temp[,target.index],
p = prob.val,
list= F)
list(train = train.data , val = temp[validation.ids,]
, test = temp[-validation.ids,])
}
data1 <-  rda.cb.partition2(data,14 , 0.8)
View(data1)
rda.cb.partition2 <- function(dataframe , target.index , prob){
library(caret)
training.ids <- createDataPartition(dataframe[, target.index],
p= prob,
list= F)
list(train = dataframe[training.ids,] , val = dataframe[-training.ids,])
}
data1 <-  rda.cb.partition2(data,14 , 0.8)
View(data1)
rda.cb.partition2 <- function(dataframe , target.index , prob){
library(caret)
training.ids <- createDataPartition(dataframe[, target.index],
p= prob,
list= F)
list(train = dataframe[training.ids,] , val = dataframe[-training.ids,])
}
rda.cb.partition2 <- function(dataframe , target.index , prob){
library(caret)
training.ids <- createDataPartition(dataframe[, target.index],
p= prob,
list= F)
list(train = dataframe[training.ids,] , val = dataframe[-training.ids,])
}
data1 <-  rda.cb.partition2(data,14 , 0.8)
View(data1)
rda.cb.partition2 <- function(dataframe , target.index , prob){
library(caret)
training.ids <- createDataPartition(dataframe[, target.index],
p= prob,
list= F)
list(train = dataframe[training.ids,] , val = dataframe[-training.ids,])
}
rda.cb.partition2 <- function(dataframe , target.index , prob){
library(caret)
training.ids <- createDataPartition(dataframe[, target.index],
p= prob,
list= F)
list(train = dataframe[training.ids,] , val = dataframe[-training.ids,])
}
data1 <-  rda.cb.partition2(data,14 , 0.8)
View(data1)
View(data1)
data1 <-  rda.cb.partition2(data, 14 , 0.8)
View(data1)
rda.cb.partition2 <- function(dataframe , target.index , prob){
library(caret)
training.ids <- createDataPartition(dataframe[, target.index],
p= prob,
list= F)
list(train = dataframe[training.ids,] , val = dataframe[training.ids,])
}
data1 <-  rda.cb.partition2(data, 14 , 0.8)
View(data1)
View(data1)
rda.cb.partition2 <- function(dataframe , target.index , prob){
library(caret)
training.ids <- createDataPartition(dataframe[, target.index],
p= prob,
list= F)
list(train = dataframe[training.ids,] , val = dataframe[-training.ids,])
}
data1 <-  rda.cb.partition2(data, 14 , 0.8)
View(data1)
data2.2 <- rda.cb.partition3(data2 , 14 , 0.7 , 0.5)
View(data2.2)
head(data1$train)
head(data1$val)
head(data2.2$train)
sample(data2.2$train)
sample(data$CRIM , 40 , replace =F)
sample(data$CRIM , 40 , replace =T)
auto <- read.csv("../data/tema2/auto-mpg.csv")
unique(auto$cylinders)
auto$cylinders <- factor(auto$cylinders
, levels = c(3,4,5,6,8),
labels = c("3cil","4cil","5cil","6cil","8cil"))
View(auto)
attach(auto)
head(cylinders)
hist(acceleration)
hist(acceleration,
col="blue")
hist(acceleration,
col="blue",
xlab="Aceleración",
ylab = "Frecuencias")
hist(acceleration,
col="blue",
xlab="Aceleración",
ylab = "Frecuencias",
main = "Histograma de las aceleraciones")
hist(acceleration,
col="blue",
xlab="Aceleración",
ylab = "Frecuencias",
main = "Histograma de las aceleraciones",
breaks = 16)
boxplot(acceleration)
boxplot(mpg)
boxplot(mpg ,
xlab = "Millas por Galeon")
boxplot(mpg ~ model_year ,
xlab = "Millas por Galeon (por año)")
boxplot(mpg ~ cylinders ,
xlab = "Consumo por numero de cilindros")
plot(mpg ~ horsepower)
pairs(~ mpg+displacement+horsepower+weight)
#histograma de frecuencias
hist(acceleration,
col= rainbow(12),
xlab="Aceleracion",
ylab = "Frecuencias",
main = "Histograma de las aceleraciones",
breaks = 12)
boxplot(auto)
hist(mpg)
hist(mpg, prob=TRUE)
density(mpg)
plot(density(mpg))
hist(mpg, prob=TRUE)
lines(density(mpg))
hist(mpg,breaks = 16, prob=TRUE)
lines(density(mpg))
linearmodel <- lm(mpg ~ horsepower)
abline(linearmodel)
plot(mpg ~ horsepower)
#boxplots
plot(mpg ~ horsepower)
linearmodel <- lm(mpg ~ horsepower)
abline(linearmodel)
#boxplots
plot(mpg ~ horsepower , type ="n")
abline(linearmodel)
#boxplots
plot(mpg ~ horsepower , type ="n")
abline(linearmodel)
#agregar colores para cada cilindrada
with(subset(auto, cylinders=="8cil") ,
points(horsepower, mpg, col = "red"))
with(subset(auto, cylinders=="6cil") ,
points(horsepower, mpg, col = "yellow"))
with(subset(auto, cylinders=="5cil") ,
points(horsepower, mpg, col = "green"))
with(subset(auto, cylinders=="4cil") ,
points(horsepower, mpg, col = "blue"))
with(subset(auto, cylinders=="3cil") ,
points(horsepower, mpg, col = "black"))
old.par <- par()
old.par
par(mfrow=c(1,2))
with(auto , {
plot(mpg ~ weight , main =" peso vs consumo")
plot (mpg ~ acceleration , main ="acceleracion vs consumo")
})
par(old.par)
auto <-  read.csv("../data/tema2/auto-mpg.csv", stringsAsFactors = F)
auto$cylinders <- factor(auto$cylinders,
levels = c(3,4,5,6,8),
labels = c("3c","4c","5c","6c","8c"))
install.packages("lattice")
#install.packages("lattice")
library(lattice)
bwplot(~ auto$mpg | auto$cylinders)
bwplot(~ auto$mpg | auto$cylinders,
main = "mpg segun cilindrada")
bwplot(~ auto$mpg | auto$cylinders,
main = "mpg segun cilindrada",
xlab = "Millas por galeon")
xyplot(mpg~cylinders | cylinders , data = auto)
xyplot(mpg~cylinders | cylinders , data = auto,
main = "Peso vs Consumo vs Cilindrada")
xyplot(mpg~weight | cylinders , data = auto,
main = "Peso vs Consumo vs Cilindrada")
xyplot(mpg~weight | cylinders , data = auto,
main = "Peso vs Consumo vs Cilindrada",
xlab ="Peso(kg)",
ylab ="COnsumo (mpg)")
xyplot(mpg~weight | cylinders , data = auto,
main = "Peso vs Consumo vs Cilindrada",
xlab ="Peso(kg)",
ylab ="Consumo (mpg)")
trellis.par.set(theme = col.whitebg())
bwplot(~ auto$mpg | auto$cylinders,
main = "mpg segun cilindrada",
xlab = "Millas por galeon")
bwplot(~ auto$mpg | auto$cylinders,
main = "mpg segun cilindrada",
xlab = "Millas por galeon",
layout = c(3,2), aspect = 1)
bwplot(~ auto$mpg | auto$cylinders,
main = "mpg segun cilindrada",
xlab = "Millas por galeon",
layout = c(2,3), aspect = 1)
data <- read.csv("../data/tema2/daily-bike-rentals.csv")
View(data)
data$season <- factor(data$season , levels = c(1,2,3,4),
labels = c("Invierno","Primavera","Verano","Otoño") )
View(data)
data$workingday <-  factor(data$workingday , levels =C(0,1),
labels = "Festivo","De Trabajo")
data$workingday <-  factor(data$workingday , levels = C(0,1),
labels = "Festivo","De Trabajo")
data$workingday <-  factor(data$workingday , levels = C(0,1),
labels = c("Festivo","De Trabajo"))
data$workingday <-  factor(data$workingday , levels = C(0,1),
labels = c("Festivo","De Trabajo"))
data$workingday <-  factor(data$workingday , levels = C(0,1),
labels = c("Festivo","De Trabajo"))
data$workingday <-  factor(data$workingday , levels = c(0,1),
labels = c("Festivo","De Trabajo"))
View(data)
data$weathersit <-  factor (data$weathersit, levels =c(1,2,3),
labels = c("Despejado","Nublado","Lluvia/nieve Ligera"))
View(data)
attach(data)
par(mfrow = c(2,2))
winter <- subset(data , season == "Invierno")$cnt
winter
str(winter)
spring <- subset(data , seasion =="Primavera")$cnt
spring <- subset(data , season =="Primavera")$cnt
summer <- subset(data, seasion =="verano")$cnt
summer <- subset(data , season =="verano")$cnt
fall   <- subset(data , season =="Otoño") $cnt
summer <- subset(data , season =="Verano")$cnt
hist(winter)
hist(winter, prob = T)
hist(winter, prob = T, xlab ="Alquiler diario en primavera", main = "N")
old.par
hist(winter, prob = T, xlab ="Alquiler diario en primavera", main = "N")
hist(winter, prob = T, xlab ="Alquiler diario en primavera", main = "N")
hist(winter, prob = T, xlab ="Alquiler diario en primavera", main = "n")
hist(winter, prob = T, xlab ="Alquiler diario en primavera", main = "")
par(mfrow = c(2,2))
hist(winter, prob = T, xlab ="Alquiler diario en primavera", main = "")
par(mfrow = c(2,2))
hist(winter, prob = T, xlab ="Alquiler diario en primavera", main = "")
hist(winter, prob = T, xlab ="Alquiler diario en primavera", main = "")
hist(winter, prob = T, xlab ="Alquiler diario en primavera", main = "")
lines(density(winter))
abline(v = mean(winter) , col = "red")
abline(v = median(winter), col ="blue")
hist(winter, prob = T, xlab ="Alquiler diario en invierno", main = "")
lines(density(winter))
abline(v = mean(winter) , col = "red")
abline(v = median(winter), col ="blue")
hist(spring, prob = T, xlab ="Alquiler diario en primavera", main = "")
lines(density(spring))
abline(v = mean(spring) , col = "red")
abline(v = median(spring), col ="blue")
par(mfrow = c(2,2))
hist(winter, prob = T, xlab ="Alquiler diario en invierno", main = "")
lines(density(winter))
abline(v = mean(winter) , col = "red")
abline(v = median(winter), col ="blue")
hist(spring, prob = T, xlab ="Alquiler diario en primavera", main = "")
lines(density(spring))
abline(v = mean(spring) , col = "red")
abline(v = median(spring), col ="blue")
par(mfrow = c(1,2))
winter <- subset(data , season == "Invierno")$cnt
hist(winter, prob = T, xlab ="Alquiler diario en invierno", main = "")
lines(density(winter))
abline(v = mean(winter) , col = "red")
abline(v = median(winter), col ="blue")
hist(spring, prob = T, xlab ="Alquiler diario en primavera", main = "")
lines(density(spring))
abline(v = mean(spring) , col = "red")
abline(v = median(spring), col ="blue")
par(mfrow = c(2,2))
hist(winter, prob = T, xlab ="Alquiler diario en invierno", main = "")
lines(density(winter))
abline(v = mean(winter) , col = "red")
abline(v = median(winter), col ="blue")
hist(spring, prob = T, xlab ="Alquiler diario en primavera", main = "")
lines(density(spring))
abline(v = mean(spring) , col = "red")
abline(v = median(spring), col ="blue")
hist(summer, prob = T, xlab ="Alquiler diario en verano", main = "")
lines(density(summer))
abline(v = mean(summer) , col = "red")
abline(v = median(summer), col ="blue")
hist(fall, prob = T, xlab ="Alquiler diario en otoño", main = "")
lines(density(fall))
abline(v = mean(fall) , col = "red")
abline(v = median(fall), col ="blue")
install.packages("beanplot")
library(beanplot)
beanplot(data$cnt ~ data$season)
beanplot(data$cnt ~ data$season, col = c("blue","red","yellow"))
par(mfrow = c(1,1))
beanplot(data$cnt ~ data$season, col = c("blue","red","yellow"))
data$dteday <- as.Date(data$dteday, format="%Y-%m-%d")
View(data)
library(lattice)
bwplot(cnt~weathersit , data = data)
bwplot(cnt~weathersit , data = data ,
layout = c(1,1), xlab ="Pronostico del tiempo",
ylab ="Frecuencias",
par.settigs = list(box.rectangle))
bwplot(cnt~weathersit , data = data ,
layout = c(1,1), xlab ="Pronostico del tiempo",
ylab ="Frecuencias",
par.settigs = list(box.rectangle = list(fill = c("red","yellow","green"))))
bwplot(cnt~weathersit , data = data ,
layout = c(1,1), xlab ="Pronostico del tiempo",
ylab ="Frecuencias",
par.settings = list(box.rectangle = list(fill = c("red","yellow","green"))))
bwplot(cnt~weathersit , data = data ,
layout = c(1,1), xlab ="Pronostico del tiempo",
ylab ="Frecuencias",
panel = function(x,y,...){
panel.bwplot(x,y,...)
panel.stripplot(x,y,jitter.data = T,...)
},
par.settings = list(box.rectangle = list(fill = c("red","yellow","green"))))
