name <- paste(names[col] , ".imputed" , sep = "")
dataFrame[name] = rand.impute(dataFrame[, col])
}
}
rand.impute <-  function(x){ # X ES UN vector de datos que puede contener NA
missing <- is.na(x) # CONTIENE UN VECTOR DE VALORES TRUE O FALSE DEPENDIENDO DEL NA DE X
#N.MISSING contiene cuando valores son NA
n.missing <- sum(missing)
#x.obs son los valores que tiene dato diferente  de NA en x
x.obs <- x[!missing]
# por defecto devolvere lo mismo que habia entado por parametro
imputed <- x
#en los valores que faltaban los reemplazamos por una muestra
#de los que si conocemos (muestra aleatoria simpre con reemplazo)
imputed[missing] <- sample(x.obs, n.missing, replace = TRUE)
return(imputed)
}
rand.impute <-  function(x){ # X ES UN vector de datos que puede contener NA
missing <- is.na(x) # CONTIENE UN VECTOR DE VALORES TRUE O FALSE DEPENDIENDO DEL NA DE X
#N.MISSING contiene cuando valores son NA
n.missing <- sum(missing)
#x.obs son los valores que tiene dato diferente  de NA en x
x.obs <- x[!missing]
# por defecto devolvere lo mismo que habia entado por parametro
imputed <- x
#en los valores que faltaban los reemplazamos por una muestra
#de los que si conocemos (muestra aleatoria simpre con reemplazo)
imputed[missing] <- sample(x.obs, n.missing, replace = TRUE)
return(imputed)
}
d
random.inpute.data.frame <-  function(dataFrame,cols){
names <- names(dataFrame)
for(col in cols){
name <- paste(names[col] , ".imputed" , sep = "")
dataFrame[name] = rand.impute(dataFrame[, col])
}
}
data <- read.csv("../data/tema1/missing-data.csv", na.strings = "")
random.inpute.data.frame(data , col(1,2))
random.inpute.data.frame(data , c(1,2))
View(data)
random.inpute.data.frame <-  function(dataFrame,cols){
names <- names(dataFrame)
for(col in cols){
name <- paste(names[col] , ".imputed" , sep = "")
dataFrame[name] = rand.impute(dataFrame[, col])
}
dataFrame
}
random.inpute.data.frame(data , c(1,2))
View(data)
data <- random.inpute.data.frame(data , c(1,2))
View(data)
data <- read.csv("../data/tema1/missing-data.csv", na.strings = "")
data$Income[data$Income==0] <-NA
data <- random.inpute.data.frame(data , c(1,2))
View(data)
salary <- c(40000,60000, 50000, 80000,60000 , 70000 , 60000)
family.salary <- c(40000,60000, 50000, 80000,60000 , 70000 , 60000)
family.salary <- c(40000,60000, 50000, 80000,60000 , 70000 , 60000)
family.size <- c(4,3,2,2,3,4,3)
family.car <- c("Lujo","Compacto","Utilitario","Lujo","Compacto", "Compacto", "Compacto")
family <- data.frame(family.salary, family.size, family.car)
View(family)
unique (family)
family.unique <- unique(family)
duplicated(family)
family[duplicated(family),]
install.packages("scales")
#install.packages("scales")
library (scales)
students <- read.csv("../data/tema1/data-conversion.csv")
View(students)
students$Income.rescaled <- rescale(students$Income)
View(students)
(students$Income - min(students$Income)) / (max(students$Income) - min (students$Income))
rescale(students$Income, to= c(0,100))
((students$Income - min(students$Income)) / (max(students$Income) - min (students$Income))) *100
rescale.many <-  function( dataframe , cols){
names <-  names (dataframe)
for(col in cols){
name <- paste(names[col] , "rescaled" ,sep =".")
dataframe[name] <- rescale(dataframe[, col])
}
cat(paste("hemos reescalado ", length(cols) , " variable(s)" ))
dataframe
}
students <- rescale.many(students ,c (1,4))
View(students)
housing <-  read.csv("../data/tema1/BostonHousing.csv")
View(housing)
housing.z <- scale(housing)
View(housing.z)
housing.none <- scale(housing , center = FALSE, scale = FALSE)
View(housing.none)
housing.mean <- scale(housing , center = TRUE, scale = FALSE)
View(housing)
housing.sd <- scale(housing , center = FALSE, scale = TRUE)
View(housing.sd)
scale.many <- function (dataframe , cols){
names <- names (dataframe)
for(col in cols){
name <- paste(names [col] , "z" ,sep = ".")
dataframe[name] <- scale(dataframe[,col])
}
cat (paste("hemos normalizado " , length(cols) , " variable(s)"))
dataframe
}
housing <- scale.many(housing , c(1,3,5:8))
View(housing)
students <- read.csv("../data/tema1/data-conversion.csv")
View(students)
bp <- c(-Inf,10000 , 31000  , Inf)
names <- c("Low","Average","High")
students$Income.cat <-  cut(students$Income , breaks = bp , labels = names)
View(students)
students$Income.cat2 <-  cut(students$Income , breaks = bp )
View(students)
students$Income.cat3 <-  cut(students$Income ,
breaks = 4 ,
labels = names )
names <- c("Low","Average","High" ,"super hight")
students$Income.cat3 <-  cut(students$Income ,
breaks = 4 ,
labels = names )
View(students)
students <- read.csv("../data/tema1/data-conversion.csv")
install.packages("dummies")
libary (dummies)
library (dummies)
View(students)
students.dummy <- dummy.data.frame(students, sep="." )
View(students.dummy)
dummy(students$State , sep=".")
dummy(students$State , sep="." , names = c("NJ", "NY"))
dummy(students$State , sep="." , names = c("State","Genger"))
dummy(students$State , names = c("State","Genger") , sep="." )
dummy(students , names = c("State","Genger") , sep="." )
dummy(students , names = c("State","Genger") , sep="." )
dummy.data.frame(students , names = c("State","Genger") , sep="." )
dummy.data.frame(students , names = c("State","Gender") , sep="." )
dummy.data.frame(students , names = c("Gender") , sep="." )
housing.data <- read.csv("../data/tema1/housing-with-missing-value.csv",
header = TRUE,
stringsAsFactors = FALSE)
View(housing.data)
Summary(housing.data)
summary(housing.data)
summary(housing.data)
housing.data <- read.csv("../data/tema1/housing-with-missing-value.csv",
header = TRUE,
stringsAsFactors = FALSE)
summary(housing.data)
housing.data.1 <-  na.onit(housing.data)
housing.data.1 <-  na.omit(housing.data)
summary(housing.data.1)
drop_na <- c("rad")
housing.data.2 <- housing.data[
complete.cases(housing.data[,!(names(housing.data)) %i% drop_na]),]
housing.data.2 <- housing.data[
complete.cases(housing.data[,!(names(housing.data)) %in% drop_na]),]
View(housing.data.2)
summary(housing.data.2)
housing.data$rad <- NULL
housing.data$rad <- NULL
View(housing.data)
housing.data <- read.csv("../data/tema1/housing-with-missing-value.csv",
header = TRUE,
stringsAsFactors = FALSE)
housing.data.3 <- housing.data[, ! names(housing.data) %in% drops]
housing.data.3 <- housing.data[, ! names(housing.data) %in% drops)]
housing.data.3 <- housing.data[, ! (names(housing.data) %in% drops)]
housing.data.3 <- housing.data[, !(names(housing.data) %in% drops)]
drops <- c("rad","ptration")
housing.data.3 <- housing.data[, !(names(housing.data) %in% drops)]
View(housing.data.3)
drops <- c("rad","ptratio")
housing.data.3 <- housing.data[, !(names(housing.data) %in% drops)]
install.packages("Hmisc")
#install.packages("Hmisc")
library(Hmisc)
housing.data.copy <- housing.data
housing.data.copy$ptratio <- impute(housing.data.copy$ptratio , mean)
housing.data.copy$rad <- impute(housing.data.copy$rad , mean)
summary (housing.data.copy)
housing.data.copy2 <- housing.data
housing.data.copy2$ptratio <- impute(housing.data.copy2$ptratio, median)
housing.data.copy2$rad <- impute(housing.data.copy2$rad, median)
summary (housing.data.copy2)
install.packages("mice")
#install.packages("mice")
library (mice)
md.pattern(housing.data)
install.packages("vim")
install.packages("VIM")
library(VIM)
aggr(housing.data)
aggr(housing.data)
aggr(housing.data)
aggr(housing.data)
aggr(housing.data,
col = c('green', 'red'))
aggr(housing.data,
col = c('green', 'red'),
numbers = TRUE)
aggr(housing.data,
col = c('green', 'red'),
numbers = TRUE,
sortVars = TRUE)
aggr(housing.data,
col = c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data))
aggr(housing.data,
col = c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 1.0)
aggr(housing.data,
col = c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 1.0)
aggr(housing.data,
col = c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.7)
aggr(housing.data,
col = c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.5)
aggr(housing.data,
col = c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 2.0)
aggr(housing.data,
col = c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.75)
aggr(housing.data,
col = c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.75,
gap = 5)
aggr(housing.data,
col = c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.75,
gap = 4)
aggr(housing.data,
col = c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.75,
gap = 2)
aggr(housing.data,
col = c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.75,
gap = 1)
aggr(housing.data,
col = c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.75,
gap = 1,
ylab = c("histograma de NAs", "patron")
)
install.packages("tidyr")
library (tidyr)
crime.data <- read.csv("../data/tema1/USArrests.csv")
View(crime.data)
crime.data <- read.csv("../data/tema1/USArrests.csv", stringsAsFactors = FALSE)
View(crime.data)
View(crime.data)
crime.data <- cbind(state = rownames(crime.data), crime.data)
View(crime.data)
crime.data.1 <- gather(crime.data,
key = "crime_type", value = "arrest_estimate",
Murder : UrbanPop)
View(crime.data.1)
crime.data.2 <- gather(crime.data,
key = "crime_type",
value = "arrest_estimate",
-state)
View(crime.data.2)
crime.data.2 <- gather(crime.data,
key ="crime_type",
value = "arrest_estimate",
Murder,Assault)
crime.data.2 <- gather(crime.data,
key = "crime_type",
value = "arrest_estimate",
-state)
crime.data.3 <- gather(crime.data,
key ="crime_type",
value = "arrest_estimate",
Murder,Assault)
View(crime.data.3)
crime.data.4 <- spread(crime.data.2,
key = "crime_type",
value ="arrest_estimate")
View(crime.data.4)
crime.data.5 <- unite(crime.data,
col = "Murder_Assault",
Murder, Assault ,
sep = "_")
View(crime.data.5)
crime.data.6 <- separate(crime.data.5,
col = "Murder_Assault",
into= c("Murder","Assault"),
sep ="_")
View(crime.data.6)
library (mice)
housing.data <- read.csv("../data/tema1/housing-with-missing-value.csv", header = TRUE, stringsAsFactors = FALSE)
housing.data <- read.csv("../data/tema1/housing-with-missing-value.csv",
header = TRUE,
stringsAsFactors = FALSE)
View(housing.data)
columnas <- c("ptratio","rad")
imputed_data <- mice(housing.data [, names(housing.data) "%in%" columnas],
m = 5,
maxit = 50,
method ="pnm",
seed ="2018"
)
imputed_data <- mice(housing.data [, names(housing.data) %in% columnas],
m = 5,
maxit = 50,
method ="pnm",
seed ="2018"
)
imputed_data <- mice(housing.data [, names(housing.data) %in% columnas],
m = 5,
maxit = 50,
method ="pnm",
seed ="2018"
)
imputed_data <- mice(housing.data [, names(housing.data) %in% columnas],
m = 5,
maxit = 50,
method ="PNM",
seed ="2018"
)
imputed_data <- mice(housing.data [, names(housing.data) %in% columnas],
m = 5,
maxit = 50,
method ="pmm",
seed ="2018"
)
View(imputed_data)
imputed_data <- mice(housing.data [, names(housing.data) %in% columnas],
m = 5,
maxit = 50,
method ="pmm",
seed ="2018"
)
summar(imputed_data)
summary(imputed_data)
imputed_data <- mice(housing.data [, names(housing.data) %in% columnas],
m = 5,
maxit = 50,
method ="pmm",
seed =2018
)
complete.data <- complete(imputed_data)
complete.data <- mice.complete(imputed_data)
complete.data <- mice::complete(imputed_data)
View(complete.data)
housing.data$ptratio <-  complete.data$ptratio
housing.data$rad <-  complete.data$rad
anyNA(housing.data)
housing.data <- read.csv("../data/tema1/housing-with-missing-value.csv",
header = TRUE,
stringsAsFactors = FALSE)
anyNA(housing.data)
impute.arg <- aregImpute(~pratio + rad , data = housing.data
, n.impute = 5)
impute.arg <- aregImpute(~ptratio + rad , data = housing.data
, n.impute = 5)
impute.arg
View(impute.arg)
impute.arg <- aregImpute(~ptratio + rad , data = housing.data
, n.impute = 5)
impute.arg
impute.arg <- aregImpute(~ptratio + rad , data = housing.data
, n.impute = 5
)
impute.arg$imputed$ptratio
ozone.data <-  read.csv("../data/tema1/ozone.csv", stringsAsFactors = FALSE)
View(ozone.data)
outlier_values <- boxplot(ozone.data$pressure_height)$out
boxplot(ozone.data$pressure_height,
main = "pressure height")
boxplot(ozone.data$pressure_height,
main = "pressure height",
boxwex = 0.1)
boxplot(ozone.data$pressure_height,
main = "pressure height",
boxwex = 1.0)
boxplot(ozone.data$pressure_height,
main = "pressure height",
boxwex = 0.5)
boxplot(ozone.data$pressure_height,
main = "Pressure Height",
boxwex = 0.5)
summary (ozone.data$pressure_height)
boxplot(ozone.data$pressure_height ~ ozone.data$Month)
boxplot(pressure_height ~ Month , data= ozone.data)
boxplot(pressure_height ~ Month ,
data= ozone.data,
main = "Pressure Height per Month")
main = "ozone"
ozone_reading ~ Month,
data = ozone.data,
main = "ozone"
boxplot(
ozone_reading ~ Month,
data = ozone.data,
main = "ozone")
boxplot(
ozone_reading ~ Month,
data = ozone.data,
main = "ozone reading per month")
ozone_reading ~ Month,
data = ozone.data,
main = "ozone reading per month")$out
ozone_reading ~ Month,
data = ozone.data,
main = "ozone reading per month")$out
boxplot(
ozone_reading ~ Month,
data = ozone.data,
main = "ozone reading per month")
ozone_reading ~ Month,
data = ozone.data,
main = "ozone reading per month")$out
boxplot(ozone.data$pressure_height,
main = "Pressure Height",
boxwex = 0.5)$out
ozone_reading ~ Month,
data = ozone.data,
main = "ozone reading per month")$out
mtext("Hola")
x[x<quantiles[1]] <- mean(x, na.rm = removeNA)
x[x<quantiles[1]] <- mean(x, na.rm = removeNA)
impute_outliers <-function (x , removeNA = TRUE){
quantiles <- quantile(x,c(0.05, 0.95), na.rm = removeNA)
x[x<quantiles[1]] <- mean(x, na.rm = removeNA)
x[x>quantiles[2]] <- median(x, na.rm= removeNA)
}
imputed_data <- impute_outliers(ozone.data$pressure_height)
par(mfrow= c(1,2))
boxplot(ozone.data$pressure_height,
main="Pression con outliers")
boxplot(imputed_data,
mean ="presion sin outliers")
x
impute_outliers <-function (x , removeNA = TRUE){
quantiles <- quantile(x,c(0.05, 0.95), na.rm = removeNA)
x[x<quantiles[1]] <- mean(x, na.rm = removeNA)
x[x>quantiles[2]] <- median(x, na.rm= removeNA)
x
}
imputed_data <- impute_outliers(ozone.data$pressure_height)
par(mfrow= c(1,2))
boxplot(ozone.data$pressure_height,
main="Pression con outliers")
boxplot(imputed_data,
mean ="presion sin outliers")
boxplot(imputed_data,
main ="presion sin outliers")
par(mfrow= c(1,2))
boxplot(ozone.data$pressure_height,
main="Pression con outliers")
boxplot(imputed_data,
main ="presion sin outliers")
replace_outliers <- function (x , removeNA = TRUE){
qrts <- quantile(x,probs = c(0.25, 0.75), na.rm = removeNA)
caps <- quantile (x, probs = c(.05, .095) , na.rm = removeNA )
iqr <- qrts[2] - qrts[1]
h <- 1.* iqr
x[x<qrts[1] - h ] <- caps[1]
x[x>qrts[2] + h ] <- caps[2]
x
}
par(mrfow =c(1,2))
par(mrfow = c(1,2))
par(mfrow = c(1,2))
boxplot(ozone.data$pressure_height , main ="Presión con outliers")
capped_pressure_height <-  replace_outliers(ozone.data$pressure_height)
boxplot(capped_pressure_height, main = "Presión sin outliers")
