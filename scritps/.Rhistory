p=0.7,
list=F)
data.training.3 <-  data2[training.ids.3,]
data.validation.3 <-  data2[-training.ids.3,]
rda.cb.partition2 <- function(dataframe , target.index , prob){
library(caret)
training.ids <- createDataPartition(dataframe[, target.index],
p= prob,
list= F)
list(train = dataframe[training.ids,] , val = dataframe[-training.ids,2])
}
rda.cb.partition3 <- function(dataframe, target.index ,
prob.train , prob.val){
library(caret)
training.ids <- createDataPartition(dataframe[,target.index],
p= prob.train,
list= F)
train.data <-  dataframe[training.ids,]
temp <-  dataframe[-training.ids,]
validation.ids <-  createDataPartition(temp[,target.index],
p = prob.val,
list= F)
list(train = train.data , val = temp[validation.ids,]
, test = temp[-validation.ids,])
}
data1 <-  rda.cb.partition2(data,14 , 0.8)
View(data1)
rda.cb.partition2 <- function(dataframe , target.index , prob){
library(caret)
training.ids <- createDataPartition(dataframe[, target.index],
p= prob,
list= F)
list(train = dataframe[training.ids,] , val = dataframe[-training.ids,])
}
data1 <-  rda.cb.partition2(data,14 , 0.8)
View(data1)
rda.cb.partition2 <- function(dataframe , target.index , prob){
library(caret)
training.ids <- createDataPartition(dataframe[, target.index],
p= prob,
list= F)
list(train = dataframe[training.ids,] , val = dataframe[-training.ids,])
}
rda.cb.partition2 <- function(dataframe , target.index , prob){
library(caret)
training.ids <- createDataPartition(dataframe[, target.index],
p= prob,
list= F)
list(train = dataframe[training.ids,] , val = dataframe[-training.ids,])
}
data1 <-  rda.cb.partition2(data,14 , 0.8)
View(data1)
rda.cb.partition2 <- function(dataframe , target.index , prob){
library(caret)
training.ids <- createDataPartition(dataframe[, target.index],
p= prob,
list= F)
list(train = dataframe[training.ids,] , val = dataframe[-training.ids,])
}
rda.cb.partition2 <- function(dataframe , target.index , prob){
library(caret)
training.ids <- createDataPartition(dataframe[, target.index],
p= prob,
list= F)
list(train = dataframe[training.ids,] , val = dataframe[-training.ids,])
}
data1 <-  rda.cb.partition2(data,14 , 0.8)
View(data1)
View(data1)
data1 <-  rda.cb.partition2(data, 14 , 0.8)
View(data1)
rda.cb.partition2 <- function(dataframe , target.index , prob){
library(caret)
training.ids <- createDataPartition(dataframe[, target.index],
p= prob,
list= F)
list(train = dataframe[training.ids,] , val = dataframe[training.ids,])
}
data1 <-  rda.cb.partition2(data, 14 , 0.8)
View(data1)
View(data1)
rda.cb.partition2 <- function(dataframe , target.index , prob){
library(caret)
training.ids <- createDataPartition(dataframe[, target.index],
p= prob,
list= F)
list(train = dataframe[training.ids,] , val = dataframe[-training.ids,])
}
data1 <-  rda.cb.partition2(data, 14 , 0.8)
View(data1)
data2.2 <- rda.cb.partition3(data2 , 14 , 0.7 , 0.5)
View(data2.2)
head(data1$train)
head(data1$val)
head(data2.2$train)
sample(data2.2$train)
sample(data$CRIM , 40 , replace =F)
sample(data$CRIM , 40 , replace =T)
auto <- read.csv("../data/tema2/auto-mpg.csv")
unique(auto$cylinders)
auto$cylinders <- factor(auto$cylinders
, levels = c(3,4,5,6,8),
labels = c("3cil","4cil","5cil","6cil","8cil"))
View(auto)
attach(auto)
head(cylinders)
hist(acceleration)
hist(acceleration,
col="blue")
hist(acceleration,
col="blue",
xlab="Aceleración",
ylab = "Frecuencias")
hist(acceleration,
col="blue",
xlab="Aceleración",
ylab = "Frecuencias",
main = "Histograma de las aceleraciones")
hist(acceleration,
col="blue",
xlab="Aceleración",
ylab = "Frecuencias",
main = "Histograma de las aceleraciones",
breaks = 16)
boxplot(acceleration)
boxplot(mpg)
boxplot(mpg ,
xlab = "Millas por Galeon")
boxplot(mpg ~ model_year ,
xlab = "Millas por Galeon (por año)")
boxplot(mpg ~ cylinders ,
xlab = "Consumo por numero de cilindros")
plot(mpg ~ horsepower)
pairs(~ mpg+displacement+horsepower+weight)
#histograma de frecuencias
hist(acceleration,
col= rainbow(12),
xlab="Aceleracion",
ylab = "Frecuencias",
main = "Histograma de las aceleraciones",
breaks = 12)
boxplot(auto)
hist(mpg)
hist(mpg, prob=TRUE)
density(mpg)
plot(density(mpg))
hist(mpg, prob=TRUE)
lines(density(mpg))
hist(mpg,breaks = 16, prob=TRUE)
lines(density(mpg))
linearmodel <- lm(mpg ~ horsepower)
abline(linearmodel)
plot(mpg ~ horsepower)
#boxplots
plot(mpg ~ horsepower)
linearmodel <- lm(mpg ~ horsepower)
abline(linearmodel)
#boxplots
plot(mpg ~ horsepower , type ="n")
abline(linearmodel)
#boxplots
plot(mpg ~ horsepower , type ="n")
abline(linearmodel)
#agregar colores para cada cilindrada
with(subset(auto, cylinders=="8cil") ,
points(horsepower, mpg, col = "red"))
with(subset(auto, cylinders=="6cil") ,
points(horsepower, mpg, col = "yellow"))
with(subset(auto, cylinders=="5cil") ,
points(horsepower, mpg, col = "green"))
with(subset(auto, cylinders=="4cil") ,
points(horsepower, mpg, col = "blue"))
with(subset(auto, cylinders=="3cil") ,
points(horsepower, mpg, col = "black"))
old.par <- par()
old.par
par(mfrow=c(1,2))
with(auto , {
plot(mpg ~ weight , main =" peso vs consumo")
plot (mpg ~ acceleration , main ="acceleracion vs consumo")
})
par(old.par)
auto <-  read.csv("../data/tema2/auto-mpg.csv", stringsAsFactors = F)
auto$cylinders <- factor(auto$cylinders,
levels = c(3,4,5,6,8),
labels = c("3c","4c","5c","6c","8c"))
install.packages("lattice")
#install.packages("lattice")
library(lattice)
bwplot(~ auto$mpg | auto$cylinders)
bwplot(~ auto$mpg | auto$cylinders,
main = "mpg segun cilindrada")
bwplot(~ auto$mpg | auto$cylinders,
main = "mpg segun cilindrada",
xlab = "Millas por galeon")
xyplot(mpg~cylinders | cylinders , data = auto)
xyplot(mpg~cylinders | cylinders , data = auto,
main = "Peso vs Consumo vs Cilindrada")
xyplot(mpg~weight | cylinders , data = auto,
main = "Peso vs Consumo vs Cilindrada")
xyplot(mpg~weight | cylinders , data = auto,
main = "Peso vs Consumo vs Cilindrada",
xlab ="Peso(kg)",
ylab ="COnsumo (mpg)")
xyplot(mpg~weight | cylinders , data = auto,
main = "Peso vs Consumo vs Cilindrada",
xlab ="Peso(kg)",
ylab ="Consumo (mpg)")
trellis.par.set(theme = col.whitebg())
bwplot(~ auto$mpg | auto$cylinders,
main = "mpg segun cilindrada",
xlab = "Millas por galeon")
bwplot(~ auto$mpg | auto$cylinders,
main = "mpg segun cilindrada",
xlab = "Millas por galeon",
layout = c(3,2), aspect = 1)
bwplot(~ auto$mpg | auto$cylinders,
main = "mpg segun cilindrada",
xlab = "Millas por galeon",
layout = c(2,3), aspect = 1)
data <- read.csv("../data/tema2/daily-bike-rentals.csv")
View(data)
data$season <- factor(data$season , levels = c(1,2,3,4),
labels = c("Invierno","Primavera","Verano","Otoño") )
View(data)
data$workingday <-  factor(data$workingday , levels =C(0,1),
labels = "Festivo","De Trabajo")
data$workingday <-  factor(data$workingday , levels = C(0,1),
labels = "Festivo","De Trabajo")
data$workingday <-  factor(data$workingday , levels = C(0,1),
labels = c("Festivo","De Trabajo"))
data$workingday <-  factor(data$workingday , levels = C(0,1),
labels = c("Festivo","De Trabajo"))
data$workingday <-  factor(data$workingday , levels = C(0,1),
labels = c("Festivo","De Trabajo"))
data$workingday <-  factor(data$workingday , levels = c(0,1),
labels = c("Festivo","De Trabajo"))
View(data)
data$weathersit <-  factor (data$weathersit, levels =c(1,2,3),
labels = c("Despejado","Nublado","Lluvia/nieve Ligera"))
View(data)
attach(data)
par(mfrow = c(2,2))
winter <- subset(data , season == "Invierno")$cnt
winter
str(winter)
spring <- subset(data , seasion =="Primavera")$cnt
spring <- subset(data , season =="Primavera")$cnt
summer <- subset(data, seasion =="verano")$cnt
summer <- subset(data , season =="verano")$cnt
fall   <- subset(data , season =="Otoño") $cnt
summer <- subset(data , season =="Verano")$cnt
hist(winter)
hist(winter, prob = T)
hist(winter, prob = T, xlab ="Alquiler diario en primavera", main = "N")
old.par
hist(winter, prob = T, xlab ="Alquiler diario en primavera", main = "N")
hist(winter, prob = T, xlab ="Alquiler diario en primavera", main = "N")
hist(winter, prob = T, xlab ="Alquiler diario en primavera", main = "n")
hist(winter, prob = T, xlab ="Alquiler diario en primavera", main = "")
par(mfrow = c(2,2))
hist(winter, prob = T, xlab ="Alquiler diario en primavera", main = "")
par(mfrow = c(2,2))
hist(winter, prob = T, xlab ="Alquiler diario en primavera", main = "")
hist(winter, prob = T, xlab ="Alquiler diario en primavera", main = "")
hist(winter, prob = T, xlab ="Alquiler diario en primavera", main = "")
lines(density(winter))
abline(v = mean(winter) , col = "red")
abline(v = median(winter), col ="blue")
hist(winter, prob = T, xlab ="Alquiler diario en invierno", main = "")
lines(density(winter))
abline(v = mean(winter) , col = "red")
abline(v = median(winter), col ="blue")
hist(spring, prob = T, xlab ="Alquiler diario en primavera", main = "")
lines(density(spring))
abline(v = mean(spring) , col = "red")
abline(v = median(spring), col ="blue")
par(mfrow = c(2,2))
hist(winter, prob = T, xlab ="Alquiler diario en invierno", main = "")
lines(density(winter))
abline(v = mean(winter) , col = "red")
abline(v = median(winter), col ="blue")
hist(spring, prob = T, xlab ="Alquiler diario en primavera", main = "")
lines(density(spring))
abline(v = mean(spring) , col = "red")
abline(v = median(spring), col ="blue")
par(mfrow = c(1,2))
winter <- subset(data , season == "Invierno")$cnt
hist(winter, prob = T, xlab ="Alquiler diario en invierno", main = "")
lines(density(winter))
abline(v = mean(winter) , col = "red")
abline(v = median(winter), col ="blue")
hist(spring, prob = T, xlab ="Alquiler diario en primavera", main = "")
lines(density(spring))
abline(v = mean(spring) , col = "red")
abline(v = median(spring), col ="blue")
par(mfrow = c(2,2))
hist(winter, prob = T, xlab ="Alquiler diario en invierno", main = "")
lines(density(winter))
abline(v = mean(winter) , col = "red")
abline(v = median(winter), col ="blue")
hist(spring, prob = T, xlab ="Alquiler diario en primavera", main = "")
lines(density(spring))
abline(v = mean(spring) , col = "red")
abline(v = median(spring), col ="blue")
hist(summer, prob = T, xlab ="Alquiler diario en verano", main = "")
lines(density(summer))
abline(v = mean(summer) , col = "red")
abline(v = median(summer), col ="blue")
hist(fall, prob = T, xlab ="Alquiler diario en otoño", main = "")
lines(density(fall))
abline(v = mean(fall) , col = "red")
abline(v = median(fall), col ="blue")
install.packages("beanplot")
library(beanplot)
beanplot(data$cnt ~ data$season)
beanplot(data$cnt ~ data$season, col = c("blue","red","yellow"))
par(mfrow = c(1,1))
beanplot(data$cnt ~ data$season, col = c("blue","red","yellow"))
data$dteday <- as.Date(data$dteday, format="%Y-%m-%d")
View(data)
library(lattice)
bwplot(cnt~weathersit , data = data)
bwplot(cnt~weathersit , data = data ,
layout = c(1,1), xlab ="Pronostico del tiempo",
ylab ="Frecuencias",
par.settigs = list(box.rectangle))
bwplot(cnt~weathersit , data = data ,
layout = c(1,1), xlab ="Pronostico del tiempo",
ylab ="Frecuencias",
par.settigs = list(box.rectangle = list(fill = c("red","yellow","green"))))
bwplot(cnt~weathersit , data = data ,
layout = c(1,1), xlab ="Pronostico del tiempo",
ylab ="Frecuencias",
par.settings = list(box.rectangle = list(fill = c("red","yellow","green"))))
bwplot(cnt~weathersit , data = data ,
layout = c(1,1), xlab ="Pronostico del tiempo",
ylab ="Frecuencias",
panel = function(x,y,...){
panel.bwplot(x,y,...)
panel.stripplot(x,y,jitter.data = T,...)
},
par.settings = list(box.rectangle = list(fill = c("red","yellow","green"))))
s <- seq(0.01, 0.99, 0.01)
s
qnorm(s)
qn <- qnorm(s)
qn
df <-  data.frame(p = s , q = qn)
View(df)
sample <- rnorm(200)
sample
quantile(sample , probs = s)
trees
qqnorm(trees$Height)
qqplot(trees$Height)
#qqplot
randu
n <-  length(randu$x)
n
n <-  length(randu$x)
y <-  qunif(ppoints(n))
y
qqplot(y , randu$x)
qqnorm(randu$x)
chi3 <-  qchisp(ppoints(30), df =3)
installed.packages("qchisp")
chi3 <-  qchisp(ppoints(30), df =3)
plor(x, pnorm)
cp <- read.csv("../data/tema3/college-perf.csv")
levels = c("Low","Medium","High")
cp$Perf <- ordered(cp$Perf ,
levels = c("Low","Medium","High"))
cp$Pred <- ordered(cp$Pred, levels = c("Low","Medium","High"))
View(cp)
table <-  table(cp$Perf , cp$Pred
, dnn= c("Actual", "Predecido"))
table
View(cp)
prop.table(table)
round(prop.table(table , 1)*100)
round(prop.table(table , 1)*100 ,2)
round(prop.table(table,2)*100 , 2)
barplot(table, legend = T
barplot(table, legend = T)
barplot(table, legend = T)
barplot(table, legend = T)
barplot(table, legend = T, XLAB ="Nota Predecida por el modelo")
barplot(table, legend = T, xlab ="Nota Predecida por el modelo")
barplot(table, legend = T,
xlab ="Nota Predecida por el modelo")
mosaicplot(table , main "Eficiencia del modelo")
mosaicplot(table , main="Eficiencia del modelo")
mosaicplot(table , main="Eficiencia del modelo")
mosaicplot(table , main="Eficiencia del modelo")
summary(table)
usarrests <-  read.csv("../data/tema3/USArrests.csv" , stringsAsFactors = F)
View(usarrests)
rownames(usarrests)  <- usarrests$X
View(usarrests)
usarrests$X = NULL
View(usarrests)
head(usarrests)
apply(usarrests,2, var)
acp <- prcomp(usarrests , center = TRUE , scale= T)
ACP
acp
plot(acp , type ="l")
summary(acp)
biplot(acp , scale =0)
biplot(acp , scale =0)
biplot(acp , scale =0)
biplot(acp , scale =0)
pc1 <-apply(acp$rotation[,1]* usarrests ,1, sum)
pc1
pc2 <- apply(acp$rotation[,1]* usarrests,1,sum)
pc2
pc2 <- apply(acp$rotation[,2]* usarrests,1,sum)
pc2
usarrests$pc1 <- pc1
usarrests$pc2 <- pc2
head(usarrests)
usarrests[,1:4] = NULL
head(usarrests)
install.packages("ROCR")
library(ROCR)
data1 <- read.csv("../data/tema3/roc-example-1.csv")
data2 <- read.csv("../data/tema3/roc-example-2.csv")
data1 <- read.csv("../data/tema3/roc-example-1.csv")
data2 <- read.csv("../data/tema3/roc-example-2.csv")
pred1 <- prediction (data1$prob, data1$class)
View(data1)
perf1 <- performance(pred1,"tpr","fpr")
plot(perf1)
lines(par()$usr[1:2] , par()$usr[3:4])
prob.cuts.1 <- data.frame(cut=perf1@alpha.values[[1]],
fpr = perf1@x.values[[1]],
tpr = perf1@y.values[[1]])
head(prob.cuts.1)
pred2 <-  prediction(data2$prob , data2$class , label.ordering = c("non-buyer", "buyer"))
perf2 <- performance(pred2 , "tpr","fpr")
plot(perf2)
lines(par()$usr[1:2] , par()$usr[3:4])
install.packages(c("rpart","rpart.plot","caret"))
library(caret)
library(rpart)
library(rpart.plot)
backnote <- read.csv("../data/tema3/banknote-authentication.csv")
view(backnote)
View(backnote)
View(backnote)
set.seed(2018)
training.ids <- createDataPartition(backnote$class,
p= 0.7,
list = F)
mod <- rpart(class ~., data = backnote[training.ids,],
method = "class",
control = rpart.control(minsplit = 20 , cp=0.01))
mod
prp(mod , type=2 , extra = 104 , nn= T,
fallen.leaves = T, faclen = 4 , varlen = 8,
shadow.col = "gray")
prp(mod , type=0 , extra = 104 , nn= T,
fallen.leaves = T, faclen = 4 , varlen = 8,
shadow.col = "gray")
prp(mod , type=1 , extra = 104 , nn= T,
fallen.leaves = T, faclen = 4 , varlen = 8,
shadow.col = "gray")
prp(mod , type=2 , extra = 104 , nn= T,
fallen.leaves = T, faclen = 4 , varlen = 8,
shadow.col = "gray")
prp(mod , type=2 , extra = 4 , nn= T,
fallen.leaves = T, faclen = 4 , varlen = 8,
shadow.col = "gray")
prp(mod , type=2 , extra = 104 , nn= T,
fallen.leaves = T, faclen = 4 , varlen = 8,
shadow.col = "gray")
prp(mod , type=2 , extra = 104 , nn= T,
fallen.leaves = T, faclen = 4 , varlen = 8,
shadow.col = "green")
prp(mod , type=2 , extra = 104 , nn= T,
fallen.leaves = T, faclen = 4 , varlen = 8,
shadow.col = "gray")
mod$cptable
mod.pruned <- prune(mod , mod$cptable[8,"CP"])
prp(mod.pruned , type=2 , extra = 104 , nn= T,
fallen.leaves = T, faclen = 4 , varlen = 8,
shadow.col = "gray")
mod.pruned <- prune(mod , mod$cptable[3,"CP"])
prp(mod.pruned , type=2 , extra = 104 , nn= T,
fallen.leaves = T, faclen = 4 , varlen = 8,
shadow.col = "gray")
mod.pruned <- prune(mod , mod$cptable[6,"CP"])
prp(mod.pruned , type=2 , extra = 104 , nn= T,
fallen.leaves = T, faclen = 4 , varlen = 8,
shadow.col = "gray")
pred.pruned <- predict(mod , backnote[- training.ids,]
,type ="class")
table(backnote[-training.ids,]$class , pred.pruned,
dnn = c("Actual","Predicho"))
pred.pruned <- predict(mod.pruned , backnote[- training.ids,]
,type ="class")
table(backnote[-training.ids,]$class , pred.pruned,
dnn = c("Actual","Predicho"))
mod.pruned <- prune(mod , mod$cptable[8,"CP"])
prp(mod.pruned , type=2 , extra = 104 , nn= T,
fallen.leaves = T, faclen = 4 , varlen = 8,
shadow.col = "gray")
pred.pruned <- predict(mod.pruned , backnote[- training.ids,]
,type ="class")
table(backnote[-training.ids,]$class , pred.pruned,
dnn = c("Actual","Predicho"))
